from pydantic import BaseModel, UUID4
from typing import Optional, List, Any, Dict
from datetime import datetime
from app.models.vulnerability import VulnerabilitySeverity, VulnerabilityStatus # Import enums

class VulnerabilityBase(BaseModel):
    name: str
    cve_id: Optional[str] = None
    description: Optional[str] = None
    severity: VulnerabilitySeverity
    status: Optional[VulnerabilityStatus] = VulnerabilityStatus.OPEN
    cvss_score: Optional[float] = None
    affected_systems: Optional[List[Any]] = None # Could be list of IDs or more complex objects
    remediation: Optional[str] = None

class VulnerabilityCreate(VulnerabilityBase):
    discovered_at: Optional[datetime] = None
    last_seen_at: Optional[datetime] = None

class VulnerabilityUpdate(BaseModel):
    name: Optional[str] = None
    cve_id: Optional[str] = None
    description: Optional[str] = None
    severity: Optional[VulnerabilitySeverity] = None
    status: Optional[VulnerabilityStatus] = None
    cvss_score: Optional[float] = None
    affected_systems: Optional[List[Any]] = None
    remediation: Optional[str] = None
    last_seen_at: Optional[datetime] = None

class VulnerabilityInDBBase(VulnerabilityBase):
    id: UUID4
    discovered_at: datetime
    last_seen_at: datetime

    class Config:
        from_attributes = True

class Vulnerability(VulnerabilityInDBBase):
    pass 