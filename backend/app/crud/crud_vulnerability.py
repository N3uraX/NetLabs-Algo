from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from typing import Optional, List
from uuid import UUID
from datetime import datetime

from app.models.vulnerability import Vulnerability
from app.schemas.vulnerability import VulnerabilityCreate, VulnerabilityUpdate

class CRUDVulnerability:
    async def get_vulnerability(self, db: AsyncSession, vuln_id: UUID) -> Optional[Vulnerability]:
        result = await db.execute(select(Vulnerability).filter(Vulnerability.id == vuln_id))
        return result.scalars().first()

    async def get_vulnerabilities(
        self, db: AsyncSession, skip: int = 0, limit: int = 100,
        severity: Optional[str] = None, status: Optional[str] = None, cve_id: Optional[str] = None
    ) -> List[Vulnerability]:
        query = select(Vulnerability).order_by(Vulnerability.last_seen_at.desc())
        if severity:
            query = query.filter(Vulnerability.severity == severity)
        if status:
            query = query.filter(Vulnerability.status == status)
        if cve_id:
            query = query.filter(Vulnerability.cve_id.ilike(f"%{cve_id}%"))
            
        result = await db.execute(query.offset(skip).limit(limit))
        return result.scalars().all()

    async def create_vulnerability(self, db: AsyncSession, *, obj_in: VulnerabilityCreate) -> Vulnerability:
        db_obj = Vulnerability(
            **obj_in.model_dump(exclude_unset=True),
            discovered_at=obj_in.discovered_at or datetime.utcnow(),
            last_seen_at=obj_in.last_seen_at or datetime.utcnow()
        )
        db.add(db_obj)
        await db.commit()
        await db.refresh(db_obj)
        return db_obj

    async def update_vulnerability(
        self, db: AsyncSession, *, db_obj: Vulnerability, obj_in: VulnerabilityUpdate
    ) -> Vulnerability:
        update_data = obj_in.model_dump(exclude_unset=True)
        if 'last_seen_at' not in update_data or update_data['last_seen_at'] is None:
            update_data['last_seen_at'] = datetime.utcnow()

        for field, value in update_data.items():
            setattr(db_obj, field, value)
        db.add(db_obj)
        await db.commit()
        await db.refresh(db_obj)
        return db_obj

vulnerability = CRUDVulnerability() 