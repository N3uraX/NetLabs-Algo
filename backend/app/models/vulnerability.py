import uuid
import enum  # <--- ADDED IMPORT
from sqlalchemy import Column, String, DateTime, Text, ForeignKey, Enum as SAEnum, Float, JSON
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from app.core.database import Base
from datetime import datetime

# CORRECTED ENUM DEFINITIONS
class VulnerabilitySeverity(str, enum.Enum):  # Inherits from enum.Enum
    INFO = "info"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class VulnerabilityStatus(str, enum.Enum):  # Inherits from enum.Enum
    OPEN = "open"
    CONFIRMED = "confirmed"
    PATCHED = "patched"
    MITIGATED = "mitigated"
    FALSE_POSITIVE = "false_positive"

class Vulnerability(Base):
    __tablename__ = "vulnerabilities"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    name = Column(String, nullable=False, index=True)
    cve_id = Column(String, index=True, nullable=True) # e.g., CVE-2021-44228
    description = Column(Text)
    # These SAEnum calls should now work correctly with values_callable
    severity = Column(SAEnum(VulnerabilitySeverity, name="vuln_severity_enum", create_type=False, values_callable=lambda obj: [e.value for e in obj]), nullable=False, index=True)
    status = Column(SAEnum(VulnerabilityStatus, name="vuln_status_enum", create_type=False, values_callable=lambda obj: [e.value for e in obj]), default=VulnerabilityStatus.OPEN, nullable=False, index=True)
    cvss_score = Column(Float, nullable=True) # Common Vulnerability Scoring System
    affected_systems = Column(JSON) # List of affected asset IDs or names
    remediation = Column(Text, nullable=True)
    discovered_at = Column(DateTime, default=datetime.utcnow, index=True)
    last_seen_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, index=True)

    # asset_id = Column(UUID(as_uuid=True), ForeignKey("assets.id")) # If you have an Asset model
    # asset = relationship("Asset")